use std::str::FromStr;
use crate::ast::{ExprTree, BinOp};

grammar;

pub Assign: Box<ExprTree> = {
    AssignVar Expr => Box::new(ExprTree::EqNode(<>))
}


pub Expr: Box<ExprTree> = { 
    Expr ExprOp Factor => Box::new(ExprTree::BinNode(<>)),
    Factor,
};

ExprOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};


pub Factor: Box<ExprTree> = {
    Factor FactorOp Term => Box::new(ExprTree::BinNode(<>)),
    Term,
};

FactorOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
};

Term: Box<ExprTree> = {
    Var => Box::new(ExprTree::Var(<>)),
    Num => Box::new(ExprTree::Number(<>)),
    "(" <Expr> ")",
};

Num: i32 = {
    r"-?[0-9]+" => i32::from_str(<>).unwrap()
};

AssignVar: Box<ExprTree> = {
    Var => Box::new(ExprTree::Var(<>)),
}

Var: String = {
    r"[A-z_][A-z0-9_]*" => String::from(<>)
}